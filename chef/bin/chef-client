#!/usr/bin/env ruby
#
# ./chef-client-new - Build a meal with chef
#
# Author:: Adam Jacob (<adam@opscode.com>)
# Copyright:: Copyright (c) 2008 Opscode, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'optparse'
require 'rubygems'
require 'chef'
require 'chef/client'
require 'chef/daemon'
require 'json'

config = {
  :config_file => "/etc/chef/client.rb"
}
opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [-d DIR|-r FILE] (options)"
  opts.on("-c CONFIG", "--config CONFIG", "The Chef Config file to use") do |c|
    config[:config_file] = c
  end
  opts.on("-u USER", "--user USER", "User to change uid to before daemonizing") do |u|
    config[:user] = u
  end
  opts.on("-g GROUP", "--group GROUP", "Group to change gid to before daemonizing") do |g|
    config[:group] = g
  end
  opts.on("-d", "--daemonize", "Daemonize the process") do |d|
    config[:daemonize] = true
  end
  opts.on("-i SECONDS", "--interval SECONDS", "Run chef-client peridoically, in seconds") do |i|
    config[:interval] = i
  end
  opts.on("-j JSON_ATTRIBS", "--json-attributes JSON_ATTRIBS", "Load attributes from a JSON file") do |j|
    config[:json_attribs] = j
  end
  opts.on("-N NODE_NAME", "--node-name NODE_NAME", "The node name for this client") do |n|
    config[:node_name] = n
  end
  opts.on("-s SECONDS", "--splay SECONDS", "The splay time for running at intervals, in seconds") do |s|
    config[:splay] = s
  end
  opts.on("-l LEVEL", "--loglevel LEVEL", "Set the log level (debug, info, warn, error, fatal)") do |l|
    config[:log_level] = l.to_sym
  end
  opts.on("-L LOGLOCATION", "--logfile LOGLOCATION", "Set the log file location, defaults to STDOUT - recommended for daemonizing") do |lf|
    config[:log_location] = lf
  end
  opts.on("-t TOKEN", "--token TOKEN", "Set the openid validation token") do |t|
    config[:validation_token] = t
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit 0
  end
end
opts.parse!(ARGV)

unless File.exists?(config[:config_file]) and File.readable?(config[:config_file])
  Chef.fatal!("I cannot find or read the config file: #{config[:config_file]}", 1)
end

if config[:json_attribs]
  if File.exists?(config[:json_attribs]) and File.readable?(config[:json_attribs])
    config[:json_attribs] = JSON.parse(IO.read(config[:json_attribs]))
  else
    Chef.fatal!("I cannot find or read #{config[:json_attribs]}", 2)
  end
end

Chef::Config.from_file(config[:config_file])
Chef::Config.configure { |c| c.merge!(config) }

if Chef::Config[:daemonize]
  unless Chef::Config[:log_location].is_a? IO
    Chef::Log.init(Chef::Config[:log_location])
  end
  Chef::Log.level(Chef::Config[:log_level])
  Chef::Daemon.daemonize("chef-client")
else
  Chef::Log.level(Chef::Config[:log_level])
end

if Chef::Config[:interval]
  if Chef::Config[:splay]
    delay = Chef::Config[:interval].to_i + rand(Chef::Config[:splay])
  else
    delay = Chef::Config[:interval].to_i
  end
else
  delay = 0
end

loop do
  begin
    c = Chef::Client.new
    c.json_attribs = Chef::Config[:json_attribs]
    c.validation_token = Chef::Config[:validation_token]
    c.node_name = Chef::Config[:node_name]
    c.run
    if Chef::Config[:interval]
      Chef::Log.debug("Sleeping for #{delay} seconds")
      sleep delay
    else
      exit 0
    end
  rescue SystemExit => e
    raise
  rescue Exception => e
    if Chef::Config[:daemonize]
      Chef::Log.error("#{e.class}")
      Chef::Log.fatal("#{e}\n#{e.backtrace.join("\n")}")
      Chef::Log.fatal("Sleeping for #{delay} seconds before trying again")
      sleep delay
      retry
    else
      raise
    end
  end
end
