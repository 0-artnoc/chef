#!/usr/bin/env ruby
#
# ./chefserver - Serving up piping hot infrastructure!
#
# Author:: Adam Jacob (<adam@opscode.com>)
# Author:: Christopher Brown (<cb@opscode.com>)
# Copyright:: Copyright (c) 2008 Opscode, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Based on the 'slice' command, by Ezra

require 'rubygems'
require 'merb-core'
require 'merb-slices'
require "chef"

__DIR__ = File.dirname(__FILE__).split("/")[0..-2].join("/")

slice_name = __DIR__.split("-")[0].split("/")[-1]

Merb::Config.use { |c|
  c[:framework]           = { :public => [Merb.root / "public", nil] }
  c[:session_store]       = 'none'
  c[:exception_details]   = true
}

if File.exists?(slice_file = File.join(__DIR__, 'lib', "#{slice_name}.rb"))
  Merb::BootLoader.before_app_loads do
    $SLICE_MODULE = Merb::Slices.filename2module(slice_file)
    require slice_file
  end
  Merb::BootLoader.after_app_loads do
    # See Merb::Slices::ModuleMixin - $SLICE_MODULE is used as a flag
    Merb::Router.prepare do 
      slice($SLICE_MODULE)
      slice_id = slice_name.gsub('-', '_').to_sym
      slice_routes = Merb::Slices.named_routes[slice_id] || {}
    
      # Setup a / root path matching route - try several defaults
      route = slice_routes[:home] || slice_routes[:index]
      if route
        params = route.params.inject({}) do |hsh,(k,v)|
          hsh[k] = v.gsub("\"", '') if k == :controller || k == :action
          hsh
        end
        match('/').to(params)
      else
        match('/').to(:controller => 'merb_slices', :action => 'index')
      end
    end
  end
else
  puts "No slice found (expected: #{slice_name})"
  exit
end

class MerbSlices < Merb::Controller
  
  def index
    html = "<h1>#{slice.name}</h1><p>#{slice.description}</p>"  
    html << "<h2>Routes</h2><ul>"
    sorted_names = slice.named_routes.keys.map { |k| [k.to_s, k] }.sort_by { |pair| pair.first }
    sorted_names.each do |_, name|
      if name != :default && (route = slice.named_routes[name])
        if name == :index
          html << %Q[<li><a href="#{url(route.name)}" title="visit #{name}">#{name}: #{route.inspect}</a></li>]
        else
          html << %Q[<li>#{name}: #{route.inspect}</li>]
        end
      end
    end
    html << "</ul>"
    html
  end
  
  private
  
  def slice
    @slice ||= Merb::Slices.slices.first
  end
  
end

ARGV.push '-H' if ARGV[0] && ARGV[0] =~ /^[^-]/

unless %w[-a --adapter -i --irb-console -r --script-runner].any? { |o| ARGV.index(o) }
  ARGV.push *%w[-a mongrel]
end

ARGV.push *[ "-I", File.join(File.dirname(__FILE__), "..", "config", "init.rb") ]

if index = ARGV.index("-C")
  config = ARGV[index+1]
  ARGV.delete("-C")
  ARGV.delete(config)
  Chef::Config.from_file(File.expand_path(config))
else
  Chef::Config.from_file(
    File.join("/etc", "chef", "server.rb")
  )
end

Merb.start
